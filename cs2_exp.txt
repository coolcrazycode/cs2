M = 16;
numSymbols = 1e5;
EbN0_db = 0:2:20;
EbN0 = EbN0_db - 10*log10(log2(M));
numSNR = length(EbN0_db);
SER = zeros(1, numSNR);
gainImabalance = 0.1;
phaseMismatch = 0.05;
dcOffsetI = 0.05;
dcOffsetQ = 0.05;

for i = 1:numSNR
    dataSymbols = randi([0 M-1], numSymbols, 1);
    modulatedSignal = qammod(dataSymbols, M, 'UnitAveragePower', true);
    I = real(modulatedSignal);
    Q = imag(modulatedSignal);
    recievedSignal = (1 + gainImabalance)*I + 1i*(1 - gainImabalance)*Q;
    recievedSignal = recievedSignal .* exp(1i * phaseMismatch);
    recievedSignal = recievedSignal + (dcOffsetI) + (1i * dcOffsetQ);
    recievedSignal = awgn(recievedSignal, EbN0_db(i), 'measured');
    demodulatedSignal = qamdemod(recievedSignal, M, 'UnitAveragePower', true);
    SER(i) = sum(dataSymbols ~= demodulatedSignal) / numSymbols;
end

figure;
semilogy(EbN0, SER, 'b-o');
title('SER vs E_b/N_0 for 16-QAM with Receiver Impairments');
xlabel('Eb/N0 in db');
ylabel('Symbol Error Rate (SER)');
grid on;

fprintf('SNR(db)   SER\n');
fprintf('-------   ------');
for j = 1:numSNR
    fprintf('%8.2f   %e\n', EbN0_db(i), SER(i));
end

scatterplot(recievedSignal);
title('Received Signal Constellation with Receiver Impairments (SNR = 20 dB)');
grid on;

EbN0_db = 0:2:24;
EbN0 = 10.^(EbN0_db/10);
M_PSK = [2, 4, 8, 16, 32];
P_SER_PSK = zeros(length(M_PSK), length(EbN0));

for i = 1:length(M_PSK)
    M = M_PSK(i);
    P_SER_PSK(i, :) = 2 * qfunc(sqrt(2*EbN0*sin(pi/M)));
end

M_PAM = [2, 4, 8, 16];
P_SER_PAM = zeros(length(M_PAM), length(EbN0));

for i = 1:length(M_PAM)
    M = M_PAM(i);
    P_SER_PAM(i, :) = 2 * (M-1)/M * qfunc(sqrt(6*log2(M)/(M^2 - 1) * EbN0));
end

M_QAM = [4,16,64,256];
P_SER_QAM = zeros(length(M_QAM), length(EbN0));

for i = 1:length(M_QAM)
    M = M_QAM(i);
    P_SER_QAM(i, :) = 4 * (1 - 1/sqrt(M)) * qfunc(sqrt(3*log2(M)/(M-1) * EbN0));
end

M_MFSK = [2, 4, 8, 16, 32];
P_SER_MFSK_coherent = zeros(length(M_MFSK), length(EbN0));

for i = 1:length(M_MFSK)
    M = M_MFSK(i);
    P_SER_MFSK_coherent(i, :) = qfunc(sqrt(2*EbN0*log2(M)/(M-1)));
end

P_SER_MFSK_noncoherent = zeros(length(M_MFSK), length(EbN0));

for i = 1:length(M_MFSK)
    M = M_MFSK(i);
    P_SER_MFSK_noncoherent(i, :) = exp(-(EbN0/2)) .* (((1+EbN0).^(M-1) - 1)./(M-1));
end

subplot(2, 3, 1);
for i = 1:length(M_PSK)
    semilogy(EbN0_db, P_SER_PSK(i, :), '-o'); hold on;
end
title('MPSK');
xlabel('Eb/N0 in db');
ylabel('SER');
grid on;

subplot(2, 3, 2);
for i = 1:length(M_PAM)
    semilogy(EbN0_db, P_SER_PAM(i, :), '-o'); hold on;
end
title('MPAM');
xlabel('Eb/N0 in db');
ylabel('SER');
grid on;

subplot(2, 3, 3);
for i = 1:length(M_QAM)
    semilogy(EbN0_db, P_SER_QAM(i, :), '-o'); hold on;
end
title('MQAM');
xlabel('Eb/N0 in db');
ylabel('SER');
grid on;

subplot(2, 3, 4);
for i = 1:length(M_MFSK)
    semilogy(EbN0_db, P_SER_MFSK_coherent(i, :), '-o'); hold on;
end
title('MFSK coherent');
xlabel('Eb/N0 in db');
ylabel('SER');
grid on;

subplot(2, 3, 5);
for i = 1:length(M_MFSK)
    semilogy(EbN0_db, P_SER_MFSK_noncoherent(i, :), '-o'); hold on;
end
title('MFSK noncoherent');
xlabel('Eb/N0 in db');
ylabel('SER');
grid on;

M = 2;
numBits = 1e3;
chipRate = 10;
snr = 10;
fs = 1000;
dataBits = randi([0 1], numBits, 1);
modulatedSignal = dataBits*2 -1;
pnSequence = randi([0 1], numBits*chipRate, 1);
pnSequence = pnSequence*2 - 1;
spreadSignal = repelem(modulatedSignal, chipRate).*pnSequence;
recievedSignal = awgn(spreadSignal, snr, 'measured');
despreadSignal = recievedSignal .* pnSequence;
despreadBits = sum(reshape(despreadSignal, chipRate, numBits), 1)' / chipRate;
recievedBits = despreadBits > 0;
BER_DSSS = sum(dataBits ~= recievedBits) / numBits;

n = length(spreadSignal);
frequencies = (-n/2 : n/2 -1) * (fs/n);
messageSpectrum = fftshift(fft(modulatedSignal, n));
pnSpectrum = fftshift(fft(pnSequence, n));
spreadSignalSpectrum = fftshift(fft(spreadSignal, n));
receivedSignalSpectrum = fftshift(fft(recievedSignal, n));
despreadSignalSpectrum = fftshift(fft(despreadSignal, n));
demodulatedSignalSpectrum = fftshift(fft(despreadBits, n));

figure;
subplot(3, 2, 1);
plot(frequencies, abs(messageSpectrum));
title('Message Signal Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

subplot(3, 2, 2);
plot(frequencies, abs(pnSpectrum));
title('PN Code Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

subplot(3, 2, 3);
plot(frequencies, abs(spreadSignalSpectrum));
title('Spread Signal Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

subplot(3, 2, 4);
plot(frequencies, abs(receivedSignalSpectrum));
title('Received Signal Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

subplot(3, 2, 5);
plot(frequencies, abs(despreadSignalSpectrum));
title('Despread Signal Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

subplot(3, 2, 6);
plot(frequencies, abs(demodulatedSignalSpectrum));
title('Demodulated Signal Spectrum (Before Decision Device)');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

numBits = 20;
numHops = 6;
hopFrequencies = [1, 2, 3, 4, 5, 6] * 1e3;
hopDuration = 1e-3;
snr = 10;
fs = 20e3;
dataBits = randi([0 1], numBits, 1);
modulatedData = 2*dataBits - 1;
bpskSignal = repelem(modulatedData, hopDuration*fs);
t = (0:1/fs:hopDuration-1/fs)';
fhssSignal = [];
hopSignal = [];

for i = 1:numBits
    hopIdx = mod(i-1, numHops) + 1;
    freq = hopFrequencies(hopIdx);
    carrier = cos(2*pi*freq*t);
    hopSignal = [hopSignal; carrier];
    fhssSignal = [fhssSignal; bpskSignal((i-1)*length(t)+1:i*length(t)) .* carrier];
end

receivedSignal = awgn(fhssSignal, snr, 'measured');
demodulatedSignal = [];
receivedBits = zeros(numBits, 1);

for i = 1:numBits
    hopIdx = mod(i-1, numHops) + 1;
    freq = hopFrequencies(hopIdx);
    carrier = cos(2*pi*freq*t);
    receivedCarrierSignal = receivedSignal((i-1)*length(t)+1:i*length(t));
    product = receivedCarrierSignal .* carrier;
    demodulatedSignal = [demodulatedSignal; product];
    receivedBits(i) = sum(product) > 0;
end

BER_FHSS = sum(dataBits ~= receivedBits) / numBits;
disp(['FHSS Bit Error Rate: ' num2str(BER_FHSS)]);

n = length(fhssSignal);
frequencies = (-n/2 : n/2 -1) * (fs/n);
fhssSpectrum = fftshift(fft(fhssSignal, n));
receivedSpectrum = fftshift(fft(receivedSignal, n));
demodulatedSpectrum = fftshift(fft(demodulatedSignal, n));

figure;
subplot(3, 1, 1);
plot(frequencies, abs(fhssSpectrum));
title('FHSS Signal Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

subplot(3, 1, 2);
plot(frequencies, abs(receivedSpectrum));
title('Received FHSS Signal Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

subplot(3, 1, 3);
plot(frequencies, abs(demodulatedSpectrum));
title('Demodulated FHSS Signal Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

numBits = 1e3;
fc1 = 1e3;
fc2 = 2e3;
fc3 = 3e3;
t = (0:numBits-1)'/fs;
snr = 10;
dataBits = randi([0 1], numBits, 1);
modulatedSignal1 = 2*dataBits - 1;
modulatedSignal2 = 2*dataBits - 1;
modulatedSignal3 = 2*dataBits - 1;
spreadSignal1 = modulatedSignal1 .* cos(2*pi*fc1*t);
spreadSignal2 = modulatedSignal2 .* cos(2*pi*fc2*t);
spreadSignal3 = modulatedSignal3 .* cos(2*pi*fc3*t);
transmittedSignal = spreadSignal1 + spreadSignal2 + spreadSignal3;
receivedSignal = awgn(transmittedSignal, snr, 'measured');
receivedSignal1 = receivedSignal .* cos(2*pi*fc1*t);
receivedSignal2 = receivedSignal .* cos(2*pi*fc2*t);
receivedSignal3 = receivedSignal .* cos(2*pi*fc3*t);
receivedBits1 = receivedSignal1 > 0;
receivedBits2 = receivedSignal2 > 0;
receivedBits3 = receivedSignal3 > 0;
BER_CDMA = sum(dataBits ~= receivedBits1) / numBits;
BER_CDMA = sum(dataBits ~= receivedBits2) / numBits;
BER_CDMA = sum(dataBits ~= receivedBits3) / numBits;

fprintf('CDMA Bit Error Rate: %.2e\n', BER_CDMA);

n = length(transmittedSignal);
frequencies = (-n/2 : n/2 -1) * (fs/n);
transmittedSpectrum = fftshift(fft(transmittedSignal, n));
receivedSpectrum = fftshift(fft(receivedSignal, n));
